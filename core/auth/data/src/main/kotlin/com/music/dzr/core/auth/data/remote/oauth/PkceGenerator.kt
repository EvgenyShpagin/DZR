package com.music.dzr.core.auth.data.remote.oauth

/**
 * A service for generating cryptographic parameters required for the OAuth 2.0 Authorization Code
 * Flow with Proof Key for Code Exchange (PKCE).
 *
 * This abstraction is responsible for creating the following values:
 * - **Code Verifier**: A high-entropy cryptographic random string.
 * - **Code Challenge**: A Base64-URL-encoded SHA-256 hash of the code verifier.
 * - **State**: A random string to protect against Cross-Site Request Forgery (CSRF) attacks.
 *
 * @see <a href="https://tools.ietf.org/html/rfc7636">RFC 7636 - Proof Key for Code Exchange</a>
 * @see <a href="https://tools.ietf.org/html/rfc6749">RFC 6749 - The OAuth 2.0 Authorization Framework</a>
 */
internal interface PkceGenerator {
    /**
     * Generates a cryptographically random `code_verifier` string.
     *
     * According to RFC 7636, the verifier must be a high-entropy string of 43 to 128 characters
     * from the set of unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`.
     *
     * @param length The desired length of the verifier string. Must be between 43 and 128.
     * @return A random URL-safe string to be used as the code verifier.
     */
    fun generateCodeVerifier(length: Int = 128): String

    /**
     * Creates a `code_challenge` from a given `code_verifier`.
     *
     * By default uses [CodeChallengeMethod.S256].
     *
     * The S256 transformation is `BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))`.
     *
     * @param verifier The code verifier generated by [generateCodeVerifier].
     * @param method The PKCE code challenge method. Defaults to [CodeChallengeMethod.S256].
     * @return The resulting URL-safe Base64-encoded challenge string.
     */
    fun generateCodeChallenge(
        verifier: String,
        method: CodeChallengeMethod = CodeChallengeMethod.S256
    ): String

    /**
     * Generates a cryptographically random `state` parameter for CSRF protection.
     *
     * This value is sent in the authorization request and must be compared with the value
     * returned in the redirect URI to ensure the response originated from the user's session.
     *
     * @param bytes The number of random bytes to generate before Base64 encoding.
     * @return A URL-safe Base64-encoded random string.
     */
    fun generateState(bytes: Int = 32): String
}
