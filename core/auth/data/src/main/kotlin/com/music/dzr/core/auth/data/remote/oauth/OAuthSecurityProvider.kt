package com.music.dzr.core.auth.data.remote.oauth

/**
 * Provides OAuth security parameters for Authorization Code + PKCE flows.
 *
 * Responsibilities:
 * - Generate `code_verifier` (RFC 7636 §4.1)
 * - Derive S256 `code_challenge` from the verifier (RFC 7636 §4.2)
 * - Generate `state` for CSRF protection (RFC 6749 §10.12)
 */
internal interface OAuthSecurityProvider {
    /**
     * Generates a cryptographically random `code_verifier` string.
     *
     * According to RFC 7636, the verifier must be a high-entropy string of 43 to 128 characters
     * from the set of unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`.
     *
     * @param length The desired length of the verifier string. Must be between 43 and 128.
     * @return A random URL-safe string to be used as the code verifier.
     */
    fun generateCodeVerifier(length: Int = 128): String

    /**
     * Derives a `code_challenge` from a given `code_verifier` using the S256 method.
     *
     * Transformation: `BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))`. RFC 7636 §4.2.
     *
     * @param verifier The code_verifier generated by [generateCodeVerifier].
     * @return The resulting URL-safe Base64-encoded challenge string.
     */
    fun deriveCodeChallengeS256(verifier: String): String

    /**
     * Generates a cryptographically random `state` parameter for CSRF protection
     * (OAuth 2.0, RFC 6749 §10.12).
     *
     * @param bytes The number of random bytes to generate before Base64URL encoding.
     * @return A URL-safe Base64-encoded random string.
     */
    fun generateCsrfState(bytes: Int = 32): String
}
