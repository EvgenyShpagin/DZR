package com.music.dzr.core.network.util

import androidx.core.net.toUri
import com.music.dzr.core.network.BuildConfig

/**
 * A helper class to build the authorization URL for the Spotify Authorization Code Flow with PKCE.
 *
 * This utility is only responsible for constructing the URL. The generation and storage of the
 * 'state' parameter and the PKCE 'code_challenge'/'code_verifier' values must be handled by the caller.
 *
 * It assumes and hardcodes protocol-specific parameters required by Spotify, such as
 * `response_type` and `code_challenge_method`.
 *
 * The [clientId] is provided via DI and is encapsulated within this class.
 */
class AuthorizationUrlBuilder(
    private val clientId: String
) {

    private val authUrl = "${BuildConfig.SPOTIFY_ACCOUNTS_URL}authorize"
    private val responseType = "code"
    private val codeChallengeMethod = "S256"

    /**
     * Builds the full authorization URL to be opened in a browser or Custom Tab.
     *
     * This method automatically includes the `code_challenge_method=S256` parameter, as this is
     * the only method supported and required by the Spotify API.
     *
     * @param redirectUri The URI to redirect to after the user grants or denies permission.
     *                    This must be a constant value that is also configured in your app's
     *                    developer console.
     * @param scope A space-separated list of scopes.
     * @param state A cryptographically-strong random value generated by the caller. The caller is
     *              responsible for storing this value and comparing it with the value returned
     *              in the authorization response to prevent CSRF attacks.
     * @param codeChallenge The code challenge generated by the caller as part of the PKCE flow.
     *                      It must be the result of a SHA-256 hash of the code verifier.
     * @return A [String] containing the complete authorization URL.
     */
    fun build(
        redirectUri: String,
        scope: String,
        state: String,
        codeChallenge: String
    ): String {
        return AUTH_URL.toUri()
            .buildUpon()
            .appendQueryParameter("response_type", RESPONSE_TYPE)
            .appendQueryParameter("client_id", clientId)
            .appendQueryParameter("scope", scope)
            .appendQueryParameter("redirect_uri", redirectUri)
            .appendQueryParameter("state", state)
            .appendQueryParameter("code_challenge_method", CODE_CHALLENGE_METHOD)
            .appendQueryParameter("code_challenge", codeChallenge)
            .build()
            .toString()
    }
}
